
#!/usr/bin/python
'''
----------------------------------------------------------------------------------------
OPM fluidics controller functions
----------------------------------------------------------------------------------------
Douglas Shepherd
12/11/2021
douglas.shepherd@asu.edu
----------------------------------------------------------------------------------------
'''

from os.path import supports_unicode_filenames
import numpy as np
import pandas as pd
import time
import sys

def lookup_valve(source_name):
    """
    Convert name of well using ASU controller convention to ASU MVP valve settings 
    :param source_name: string
    :return valve_position: ndarray
    """

    valve_dict = {'B01': [0,1], 'B02': [0,2], 'B03': [0,3], 'B04': [0,4], 'B05': [0,5], 'B06': [0,6], 'B07': [0,7], 
                  'B08': [1,1], 'B09': [1,2], 'B10': [1,3], 'B11': [1,4], 'B12': [1,5], 'B13': [1,6], 'B14': [1,7], 
                  'B15': [2,1], 'B16': [2,2], 'B17': [2,3], 'B18': [2,4], 'B19': [2,5], 'B20': [2,6], 'B21': [2,7], 
                  'B22': [3,1], 'B23': [3,2], 'B24': [3,3],
                  'SSC': [3,0], 'READOUT WASH': [3,4], 'IMAGING BUFFER': [3,5], 'CLEAVE': [3,7]}

    valve_position = valve_dict.get(source_name)

    return valve_position

def run_fluidic_program(r_idx, df_program, mvp_controller, pump_controller):

    """
    Run fluidics program for a given round. Requires data structure generated by ASU fluidics program generator (define_fluidics_program.ipynb)
    :param r_idx: int
        fluidics round to execute
    :param df_program: dataframe
        dataframe containing entire fluidics program
    :param mvp_controller: HamiltonMVP
        handle to initialized chain of Hamilton MVP valves
    :param pump_controller: APump
        handle to initialized pump

    :return True: boolean
        TO DO: need to work this into try/except statements to catch any pump errors
    """

    # select current round
    df_current_program = df_program[(df_program['round']==r_idx+1)]


    print ('Executing iterative round '+str(r_idx+1)+'.')
    for index, row in df_current_program.iterrows():
        # extract source name
        source_name = str(row['source']).strip()

        # extract pump rate
        pump_amount_ml = float(row['volume'])
        pump_time_min  = float(row['time'])

        if source_name == 'RUN':
            pump_controller.stopFlow()
            print('Fluidics round done, running imaging.')
        elif source_name == 'PAUSE':
            pump_controller.stopFlow()
            print('Pausing for:' +str(pump_time_min*60)+' seconds.')
            time.sleep(pump_time_min*60)
        else:
            # extract and set valve
            valve_position = lookup_valve(source_name)
            mvp_unit = valve_position[0]
            valve_number = valve_position[1]
            if mvp_unit == 0:
                mvp_controller.changePort(valve_ID=0,port_ID=valve_number)
                mvp_controller.changePort(valve_ID=1,port_ID=0)
                mvp_controller.changePort(valve_ID=2,port_ID=0)
                mvp_controller.changePort(valve_ID=3,port_ID=0)
            elif mvp_unit == 1:
                mvp_controller.changePort(valve_ID=0,port_ID=0)
                mvp_controller.changePort(valve_ID=1,port_ID=valve_number)
                mvp_controller.changePort(valve_ID=2,port_ID=0)
                mvp_controller.changePort(valve_ID=3,port_ID=0)
            elif mvp_unit == 2:
                mvp_controller.changePort(valve_ID=0,port_ID=0)
                mvp_controller.changePort(valve_ID=1,port_ID=0)
                mvp_controller.changePort(valve_ID=2,port_ID=valve_number)
                mvp_controller.changePort(valve_ID=3,port_ID=0)
            elif mvp_unit == 3:
                mvp_controller.changePort(valve_ID=0,port_ID=0)
                mvp_controller.changePort(valve_ID=1,port_ID=0)
                mvp_controller.changePort(valve_ID=2,port_ID=0)
                mvp_controller.changePort(valve_ID=3,port_ID=valve_number)
            time.sleep(3)

            print('MVP unit: '+str(mvp_unit)+'; Valve #: '+str(valve_number))

            # convert ml/min rate to pump rate
            # this is hardcoded to the ASU fluidic setup
            # please check for your own setup
            pump_rate = -1.0

            if np.round((pump_amount_ml/pump_time_min),2) == 1:
                pump_rate = 48.0
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.50:
                pump_rate = 11.0
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.40:
                pump_rate = 10.0
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.36:
                pump_rate = 9.5
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.33:
                pump_rate = 9.0
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.22:
                pump_rate = 5.0
            elif np.round((pump_amount_ml/pump_time_min),2) == 0.2:
                pump_rate = 4.0

            print('Pump setting: '+str(pump_rate))

            if pump_rate == -1.0:
                print('Error in determining pump rate. Exiting.')
                sys.exit()

            # run pump
            pump_controller.startFlow(pump_rate,direction='Forward')
            time.sleep(pump_time_min*60)
            pump_controller.stopFlow()
    
    return True